---
title : "Création d'un rapport sous Rmarkdown"
author : "Philippe Ruiz - Aubi"
Rendering:
  embed-resources: true
---

## `Rmarkdown`

`Rmarkdown` est un programme orienté `R` qui permet de produire des documents `.docx`,
`.pptx`, `.pdf` ou `.html` directement sous `R` en incluant des résultats d'analyses qui
s'executent lors de la création du document.

## Les dépendances

Sous `R` / `RStudio` le package `knitr` permettant la compilation du document 
doit être présent.

```r
> library(knitr)
```

`RStudio` permet de générer automatiquement un caneva de fichier `Rmardown` : 
*File* \> *New File* \> *R Markdown*.

## Les différentes parties d'un document

### L'en-tête

Il s'agit de la section contenant toutes les informations générales permettant 
la construcion du document : Titre, auteur, date, format, style (css), ...

```markdown
---
title : "Création d'un rapport sous Rmarkdown"
author : "Philippe Ruiz - Aubi"
date: "`r Sys.Date()`"
output : html_document 
---
```

### Le *chunck* (code source)

Le code à executer doit être encapsulé dans des balises. Celui-ci sera executé 
lors de la compilation du document :

````markdown
```{{r name, options}}
1 + 1
```
````

### Le texte

- Il est bien sur possible d'ajouter du texte entre chaque *chunk*, avec le format 
souhaité :
  - *italique* : *
  - **gras** : **
  - `code` : `
  - [liens](https://rmarkdown.rstudio.com/) : \[ \]\(https://...  \)

- De gérer les titres, ...
````
# Titre 1

## Titre 2
````

- De gérer les équations, $E = mc^{2}$ : `$ $`

## Les analyses et leurs résulats

### Les figures

- Une figure générée par un *chunk* pourra être directement insérée dans le document :

````markdown
```{{r name, options}}
require(graphics)
data(airquality)
pairs(airquality, panel = panel.smooth, main = "airquality data")
```
````
```{r}
#| label: first
#| echo: false
require(graphics)
data(airquality)
pairs(airquality, panel = panel.smooth, main = "airquality data")
```

- Il est également possible d'insérer une figure enregistrée dans un fichier 
local en insérant directement un lien dans le document :

````markdown
![Figure 1](fig2.png)
````

![Figure 1](fig2.png)

### Les tableaux

Il est également possible d'afficher des tableaux générés avec `R` :

````markdown
```{{r}}
head(airquality)
```
````

```{r}
#| label: second
#| echo: false
head(airquality)
```

Le problème est que l'on obtient une sortie graphique de `R` qui n'est pas très
agréable. Pour améliorer ça il est préférable d'utiliser la fonction `kable` du 
package `knitr`.

````markdown
```{{r}}
require(knitr)
kable(head(airquality))
```
````

```{r}
#| label: third
#| echo: false
#| message: false
require(knitr)
kable(head(airquality))
```

## Les options avancées pour le documents

Il est possible de fournir des spécificités globales pour le document : format, 
affichage du code, présence d'une table des matières, taille des figures, style ...

Toutes ces informations sont à renseigner dans l'en-tête du document :

### Formats multiples 

- Sortie html

```markdown
---
title : "Création d'un rapport sous Rmarkdown / Quarto"
author : "Philippe Ruiz - Aubi"
date: "`r Sys.Date()`"
output : 
  html_document :
    css : style.css
    toc: true
    toc_float: true
    code_folding: hide
    fig_width: 14
    fig_height: 7
    fig_caption: true
  pdf_document :
    fig_width: 14
    fig_height: 7
    fig_caption: true  
---
```

- Sortie pdf

```markdown
---
title : "Création d'un rapport sous Rmarkdown / Quarto"
author : "Philippe Ruiz - Aubi"
date: "`r Sys.Date()`"
output : 
  pdf_document :
    fig_width: 14
    fig_height: 7
    fig_caption: true  
---
```

### Les paneaux 

Il est possble de créer facilement des onglets dans une section pour gagner
en lisibilité :

````
# Titre 1 {.tabset}

## Titre 1.1

## Titre 1.2

# Titre 2
````

Toutes les sections de niveau inférieur à `Titre 1 {.tabset}` seront organisées
en onglets.

## Bonus : Un peu de `Quarto` pour terminer

`Quarto` est la future génération de `Rmarkdown` qui se veut multi-language 
(`R`, `Python`, `Julia`, ...) et indépendant de `R` et `RStudio`. 
Il fonctionne aussi sous `VScode` ou sur le terminal.

La nomenclature de `Quarto` et relativement proche de celle de `Rmarkdown`. 
Il faut cependant installer la library `quarto` :

```r
> install.packages(quarto)
> library(quarto)
```

Sous `RStudio` il est alors possible de créer un nouveau document avec un template `Quarto` :

`RStudio` permet de générer automatiquement un caneva de fichier `Quarto` : 
*File* \> *New File* \> *Quarto Document*.

### Quelques différences pour rédiger l'en-tête

D'une manière générale l'en-tête suit le même schéma que pour `Rmarkdown`, 
quelques noms d'options changent,  il y a plus d'options pour gérer l'execution 
du code:

-   **output** -> **format**

-   **html_document** -> **html**

On peut gérer directement l'utilisation du cache :

```markdown
---
title: "My Document"
format: html
execute: 
  cache: true
  feeze: auto
---
```
Il existe plusieurs formats de présentation (type powerpoint) mais un peut être
particulièrement interessant :
[`revealjs`](https://quarto.org/docs/presentations/revealjs/).

Il permet d'obtenir des slides en html / javascript  de très bonne qualité.
Pour les personnes INRAe il existe même un format spécifique respectant 
la charte graphique de l'institut `inrae-revealjs` disponible dans le package 
[`InraeThemes`](https://github.com/davidcarayon/InraeThemes). 

```markdown
---
title: "My Document"
author: "Philippe Ruiz"
date: "`r Sys.Date()`"
format:
  inrae-revealjs:
    toc: false
    fig-width: 14
    fig-height: 7
    embed-resources: true
    footer: "My Document 2023"
editor: visual    
---
```

### Les options des *chunks* changent de place

````markdown
```{{r}}
#| label: name
#| results: asis
#| eval: true
...
````

### Les sorties des tableaux sont plus travaillées

````markdown
```{{r}}
head(airquality)
```
````

```{r}
#| label: fourth
#| echo: false
head(airquality)
```

### les balises des onglets s'écrivent différement

D'une manière générale le rendu du document est supérieur sous `Quarto` à celui 
de `Rmarkdown` par défaut.

````
# Titre 1

::: {.panel-tabset}

## Titre 1.1

## Titre 1.2

:::

# Titre 2
````
