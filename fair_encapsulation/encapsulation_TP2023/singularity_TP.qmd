---
title: "Images Docker / Singularity"
author: "Philippe Ruiz - Aubi"
format: html
editor: visual
---

## Image `Singularity`

`Singularity` est un gestionnaire qui permet la création, la gestion et l'exécution de *container* sur une machine locale comme sur un serveur de calcul.

Il existe plusieurs façons d'obtenir une image `Singularity` :

-   Télécharger une image existante depuis le dépot `Singularity` : [Sylabs Hub](https://cloud.sylabs.io/library) (remplace Singularity Hub qui n'est plus supporté depuis fin 2021)
-   Télecharger une image existante depuis le dépot `Docker` : [Docker Hub](https://hub.docker.com/) (recommandé)
-   Convertir une image `Docker` existante en image `Singularity`
-   Créer une image `Docker` et la convertir en `Singularity`

### Téléchargement à partir du Sylab

C'est une des deux façons les plus simples d'obtenir une image `Singularity` On commence par vérifier que la bonne version de `Singularity` est installée :

``` bash
$ singularity version
```

Puis on télécharge directement l'image :

``` bash
$ singularity pull library://yuj25/rstudio/singularity-rstudio-v4.2.1
```

### Téléchargement à partir du Docker Hub

On peut directement la télécharger avec `Singularity` :

``` bash
$ singularity pull r-base.sif docker://rstudio/r-base:4.0-focal

$ ls
```

Contrairement à `Docker` l'image est directement stockée dans le répertoire de travail.

### Convertion d'une image `Docker` en `Singularity`

La méthode la plus simple est la précédente. Cependant, dans le cas ou l'on possède déjà une image `Docker` et que l'on souhaite la convertir en image `Singularity` il faut utiliser l'outil [`docker2singularity`](https://github.com/singularityhub/docker2singularity) développé par singularityhub et utiliser `Docker`.

`docker2singularity` : c'est aussi une image `Docker` qu'il faut récupérer :

``` bash
$ docker pull quay.io/singularity/docker2singularity

$ docker image ls
```

On peut alors l'utiliser pour convertir notre image :

``` bash
$ mkdir -p ~/output

$ docker run -v /var/run/docker.sock:/var/run/docker.sock \
-v ~/output:/output \
--privileged -t --rm \
quay.io/singularity/docker2singularity \
rstudio/r-base:4.0-focal
```

### Utilisation d'une image `Singularity`

Maintenant que l'on a une image `Singularity` on peut l'utiliser en local ou sur le cluster de calcul.

#### Utilisation en local

``` bash
$ singularity run r-base.sif 
```

#### Utilisation sur le cluster de calcul

On peut utiliser une image singularity dans un job executé sur le serveur en appelant directement singularity dans le script du job.

Pour cela il faut au moins 3 fichiers dans le répertoire de travail du cluster de calcul :

-   un script `slurm` pour executer le job : `demoSingularity.sh`
-   un script `R` pour les calculs à faire : `demo.R`
-   l'image `singularity` : `r-base.sif`

Il suffit d'une ligne dans le script `slurm` pour executer `R` sur le cluster de calcul :

``` bash
$ singularity exec r-base.sif R --slave -e "source('demo.R')"
```

## Image `Docker`

### Téléchargement à partir du Docker Hub

C'est la méthode la plus simple. On commence par vérifier que la bonne version de `Docker` est installée :

``` bash
$ docker version
```

On va ensuite récupérer l'image Docker officielle de `R` sur le dépot de `rstudio` avec `Docker`, on obtiendra alors une image `Docker` qu'il faudra convertir en image `Singularity` :

``` bash
$ docker pull rstudio/r-base:4.0-focal
```

On vérifie ensuite qu'elle est bien présente :

``` bash
$ docker image ls
```

### Creation d'une image `Docker` à partir d'une recette

Il est possible de créer sa propre image `Docker`. Pour cela il faut un fichier
spécifique (*recette*) qui va contenir les instructions nécessaire à la construction de l'image `Docker`.

Il s'agit d'un fichier `Dockerfile` qui se présente comme suit :

``` bash
FROM ... # permet de récupérer une image de base nécessaire à la construction
RUN apt-get install ... # permet d'installer les dépendances de l'OS nécessaire
RUN Rscript -e 'install.packages(...)' # permet d'installer le ou les packages
  # utilisés
```

Il ne reste plus qu'a construire l'image `Docker` avec :

``` bash
$ docker build --file Dockerfile -t rbase:v2.0 .

$ docker image ls
```

Cette opération peut être plus ou moins longue suivant 
la taille et le nombre de progammes / dépendances à installer. Cependant cette étape est parallélisée, donc plus il y a de processeur sur la machine, plus cette étape est rapide. Ici on va en utiliser 16.

### Mise à jour de l'image `Docker`

Il est possible de mettre à jour une image `Docker` pour ajouter un programme
ou un package supplémentaire simplement en moddifiant le fichier Dockerfile.
Une nouvelle image sera construite à partir de l'ancienne.
Comme `Docker` fonctionne avec un cache la construction de la nouvelle image est
plus rapide.

``` bash
$ docker build --file Dockerfile -t rbase:v2.0 .

$ docker image ls
```

Une nouvelle image est créer avec le tag de l'ancienne.

`Docker` a son propre système de gestion des images.
Pour supprimmer une image `Docker` il suffit de faire :

``` bash
$ docker image rm -f IMAGE_ID
```

### Utilisation de l'image `Docker`

On peut maintenant utiliser l'image créée en local avec :

``` bash
$ docker run -ti rbase:v2.0
```
